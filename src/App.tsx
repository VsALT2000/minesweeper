import React, {useEffect, useState} from 'react';
import styles from "./App.less";
import FlagIcon from "flag.svg";
import cn from "classnames";

const width = 8;
const height = 10;
const countMines = 10;

type tile = {
    x: number,
    y: number,
    flag: boolean,
    opened: boolean,
    mine: boolean,
    countMineAround: number
}

const addMinesOnMap = (arr: tile[][], x: number, y: number) => {
    const addMine = (x: number, y: number) => {
        arr[x][y].mine = true;
        arr[x][y].countMineAround = -1;

        for (let dx = Math.max(x - 1, 0); dx < Math.min(x + 2, width); dx++) {
            for (let dy = Math.max(y - 1, 0); dy < Math.min(y + 2, height); dy++) {
                if (!arr[dx][dy].mine)
                    arr[dx][dy].countMineAround++;
            }
        }
    }

    const flat = arr.flat();
    const index = x * height + y;
    flat.splice(index, 1);

    while (width * height - flat.length - 1 !== countMines) {
        const index = Math.floor(Math.random() * flat.length);
        const element = flat[index];
        addMine(element.x, element.y);
        flat.splice(index, 1);
    }
}

const getMap = () => {
    const arr: tile[][] = [];

    for (let x = 0; x < width; x++) {
        arr[x] = [];
        for (let y = 0; y < height; y++) {
            arr[x][y] = {x: x, y: y, flag: false, opened: false, mine: false, countMineAround: 0}
        }
    }

    return arr;
}

function bfs(map: any, x: number, y: number) {
    const queue = []
    if (!map[x][y].flag && !map[x][y].opened) {
        queue.push(map[x][y])
        map[x][y].opened = true
    }
    while (queue.length > 0) {
        const v = queue.shift()
        if (v.countMineAround === 0)
            for (let dx = Math.max(v.x - 1, 0); dx < Math.min(v.x + 2, width); dx++) {
                for (let dy = Math.max(v.y - 1, 0); dy < Math.min(v.y + 2, height); dy++) {
                    if (!map[dx][dy].opened && !map[dx][dy].flag) {
                        map[dx][dy].opened = true
                        if (map[dx][dy].countMineAround === 0) {
                            queue.push(map[dx][dy]);
                        }
                    }
                }
            }
    }
    return map
}

const Colors = {
    "-1": "#000",
    "0": "#000",
    "1": "#1977D2",
    "2": "#388E3E",
    "3": "#D32F2F",
    "4": "#7C21A2",
    "5": "#FF8F00",
    "6": "#000dff",
    "7": "#ff00ae",
    "8": "#50d915",
}

const getSeconds = (date: Date) => {
    return date.getSeconds();
}

function App() {
    const [map, setMap] = useState<tile[][]>([]);
    const [firstStep, setFirstStep] = useState(true);
    const [flagsLeft, setFlagsLeft] = useState(countMines);

    if (!map.length)
        setMap(getMap());

    const onClick = (e: React.SyntheticEvent, x: number, y: number) => {
        e.preventDefault();
        if (e.type === "click") {
            if (firstStep) {
                addMinesOnMap(map, x, y);
                setFirstStep(false);
            }
            setMap(bfs(map, x, y).slice());
        }
        if (e.type === "contextmenu") {
            if (!map[x][y].opened) {
                const flagsLeftChange = map[x][y].flag ? flagsLeft + 1 : flagsLeft - 1;
                setFlagsLeft(flagsLeftChange);
                map[x][y].flag = !map[x][y].flag;
                setMap(map.slice());
            }
        }
    }

    return (
        <div className={styles.App}>
            <div className={styles.Info}>
                <svg width="16" height="19" viewBox="0 0 16 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1 2.13334V10.0667C1 10.0667 4.30865 9.42618 6.25 10.0667C7.80547 10.5798 8.19453 11.8202 9.75 12.3333C11.6913 12.9738 15 12.3333 15 12.3333V3.83334C15 3.83334 11.728 4.35738 9.75 3.83334C8.27568 3.44274 7.72432 2.52394 6.25 2.13334C4.27199 1.60929 1 2.13334 1 2.13334Z" fill="#FF0000"/>
                    <path d="M0 18C0 18.5523 0.447715 19 1 19C1.55228 19 2 18.5523 2 18H0ZM2 1C2 0.447715 1.55228 0 1 0C0.447715 0 0 0.447715 0 1H2ZM6.25 2.13334L6.5061 1.16669L6.5061 1.16669L6.25 2.13334ZM9.75 3.83334L10.0061 2.86669L10.0061 2.86669L9.75 3.83334ZM15 3.83334H16C16 3.54049 15.8716 3.26236 15.6488 3.07237C15.4259 2.88237 15.131 2.79961 14.8419 2.84592L15 3.83334ZM15 12.3333L15.1901 13.3151C15.6603 13.2241 16 12.8123 16 12.3333H15ZM9.75 12.3333L9.43669 13.283L9.43669 13.283L9.75 12.3333ZM6.25 10.0667L6.56331 9.11702L6.56331 9.11702L6.25 10.0667ZM2 18V10.0667H0V18H2ZM2 10.0667V2.13334H0V10.0667H2ZM2 2.13334V1H0V2.13334H2ZM1 2.13334C1.15815 3.12075 1.15804 3.12077 1.15794 3.12078C1.15793 3.12079 1.15784 3.1208 1.15781 3.12081C1.15775 3.12082 1.15773 3.12082 1.15777 3.12081C1.15784 3.1208 1.15811 3.12076 1.15857 3.12068C1.15949 3.12054 1.16119 3.12027 1.16364 3.11989C1.16854 3.11912 1.17646 3.1179 1.18727 3.11626C1.2089 3.11298 1.24204 3.10804 1.28559 3.10183C1.37274 3.08941 1.50132 3.07192 1.66252 3.05237C1.9856 3.0132 2.43619 2.9662 2.94462 2.93493C3.99305 2.87046 5.16945 2.88156 5.9939 3.09999L6.5061 1.16669C5.35254 0.861066 3.90394 0.872165 2.82187 0.938705C2.26505 0.972945 1.77402 1.0242 1.42179 1.06691C1.24533 1.08831 1.10283 1.10766 1.00332 1.12185C0.953541 1.12895 0.914454 1.13476 0.887183 1.1389C0.873546 1.14097 0.862857 1.14262 0.855257 1.14381C0.851457 1.1444 0.848428 1.14488 0.846189 1.14523C0.845069 1.14541 0.844147 1.14555 0.843424 1.14567C0.843062 1.14573 0.842751 1.14578 0.842489 1.14582C0.842358 1.14584 0.8422 1.14586 0.842134 1.14588C0.841988 1.1459 0.841855 1.14592 1 2.13334ZM5.9939 3.09999C6.56238 3.2506 6.9511 3.49606 7.45714 3.82316C7.96394 4.15076 8.58805 4.56 9.4939 4.79999L10.0061 2.86669C9.43762 2.71608 9.0489 2.47061 8.54286 2.14351C8.03606 1.81591 7.41195 1.40668 6.5061 1.16669L5.9939 3.09999ZM9.4939 4.79999C10.6475 5.10561 12.0961 5.09451 13.1781 5.02797C13.7349 4.99373 14.226 4.94247 14.5782 4.89976C14.7547 4.87836 14.8972 4.85901 14.9967 4.84482C15.0465 4.83772 15.0855 4.83191 15.1128 4.82777C15.1265 4.8257 15.1371 4.82405 15.1447 4.82286C15.1485 4.82227 15.1516 4.82179 15.1538 4.82144C15.1549 4.82126 15.1559 4.82112 15.1566 4.821C15.1569 4.82094 15.1572 4.82089 15.1575 4.82085C15.1576 4.82083 15.1578 4.82081 15.1579 4.8208C15.158 4.82077 15.1581 4.82075 15 3.83334C14.8419 2.84592 14.842 2.8459 14.8421 2.84589C14.8421 2.84588 14.8422 2.84587 14.8422 2.84587C14.8423 2.84586 14.8423 2.84585 14.8422 2.84586C14.8422 2.84587 14.8419 2.84591 14.8414 2.84599C14.8405 2.84613 14.8388 2.8464 14.8364 2.84678C14.8315 2.84755 14.8235 2.84877 14.8127 2.85041C14.7911 2.8537 14.758 2.85863 14.7144 2.86484C14.6273 2.87726 14.4987 2.89475 14.3375 2.9143C14.0144 2.95347 13.5638 3.00047 13.0554 3.03174C12.0069 3.09621 10.8305 3.08511 10.0061 2.86669L9.4939 4.79999ZM14 3.83334V12.3333H16V3.83334H14ZM15 12.3333C14.8099 11.3516 14.8101 11.3515 14.8102 11.3515C14.8102 11.3515 14.8103 11.3515 14.8104 11.3515C14.8105 11.3515 14.8105 11.3515 14.8105 11.3515C14.8105 11.3515 14.8103 11.3515 14.8098 11.3516C14.809 11.3517 14.8074 11.352 14.805 11.3525C14.8003 11.3534 14.7925 11.3548 14.7818 11.3568C14.7605 11.3607 14.7275 11.3667 14.684 11.3742C14.5971 11.3892 14.4685 11.4103 14.3073 11.434C13.9841 11.4815 13.5341 11.5385 13.0284 11.5763C11.9772 11.655 10.8342 11.638 10.0633 11.3837L9.43669 13.283C10.6072 13.6692 12.0891 13.6522 13.1776 13.5707C13.7417 13.5285 14.2403 13.4654 14.5981 13.4128C14.7774 13.3864 14.9225 13.3626 15.024 13.345C15.0749 13.3363 15.1149 13.3291 15.1429 13.3239C15.1569 13.3214 15.1679 13.3193 15.1758 13.3178C15.1798 13.3171 15.183 13.3165 15.1853 13.316C15.1865 13.3158 15.1875 13.3156 15.1883 13.3154C15.1887 13.3154 15.189 13.3153 15.1893 13.3152C15.1895 13.3152 15.1897 13.3152 15.1897 13.3152C15.1899 13.3151 15.1901 13.3151 15 12.3333ZM10.0633 11.3837C9.5062 11.1999 9.15796 10.8977 8.66968 10.4574C8.18569 10.0209 7.56168 9.4464 6.56331 9.11702L5.93669 11.0163C6.4938 11.2001 6.84204 11.5023 7.33032 11.9426C7.81431 12.3791 8.43832 12.9536 9.43669 13.283L10.0633 11.3837ZM6.56331 9.11702C5.39281 8.73085 3.91088 8.74782 2.82237 8.82927C2.25827 8.87149 1.75974 8.93465 1.40193 8.98722C1.22259 9.01358 1.07752 9.03743 0.97595 9.05496C0.925141 9.06372 0.885143 9.07092 0.85711 9.07606C0.843091 9.07863 0.832056 9.0807 0.82415 9.08219C0.820197 9.08293 0.817025 9.08354 0.814652 9.08399C0.813466 9.08422 0.812479 9.08441 0.811695 9.08456C0.811302 9.08463 0.81096 9.0847 0.810669 9.08476C0.810524 9.08478 0.810344 9.08482 0.810271 9.08483C0.810104 9.08486 0.809949 9.08489 1 10.0667C1.19005 11.0484 1.18992 11.0485 1.1898 11.0485C1.18978 11.0485 1.18968 11.0485 1.18963 11.0485C1.18954 11.0485 1.1895 11.0485 1.18951 11.0485C1.18953 11.0485 1.18975 11.0485 1.19016 11.0484C1.19098 11.0483 1.19258 11.048 1.19495 11.0475C1.19968 11.0466 1.20747 11.0452 1.21815 11.0432C1.23953 11.0393 1.27252 11.0333 1.31597 11.0258C1.40293 11.0108 1.53151 10.9897 1.6927 10.966C2.01592 10.9185 2.46589 10.8615 2.97162 10.8237C4.02277 10.745 5.16584 10.762 5.93669 11.0163L6.56331 9.11702Z" fill="#222222"/>
                </svg>
                <span>
                    {
                        ": " + flagsLeft
                    }
                </span>
            </div>
            <div className={styles.AppContainer}>
                {
                    map.map(line =>
                        <div className={styles.Line}>
                            {
                                line.map(el => <div
                                        style={{color: Colors[el.countMineAround.toString() as keyof typeof Colors]}}
                                        className={cn(styles.TileContainer, {
                                            [styles.Flag]: el.flag,
                                            [styles.Mine]: el.mine && el.opened,
                                            [styles.Opened]: !el.mine && el.opened
                                        })}
                                        onClick={(e) => onClick(e, el.x, el.y)}
                                        onContextMenu={(e) => onClick(e, el.x, el.y)}>
                                        <div className={styles.Tile}>
                                            {
                                                el.opened && (el.mine ? "MINE" : el.countMineAround > 0 && el.countMineAround)
                                            }
                                        </div>
                                        <div className={styles.TileFront}/>
                                    </div>
                                )
                            }
                        </div>
                    )
                }
            </div>
        </div>
    );
}

export default App;
